 <!-- navbar -->
  <%= render "devise/shared/navbar" %>
<!-- banner -->
<div class="bottom-container">
  <div class="login-menu">
      <%= simple_form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
        <div class="form-inputs">
          <%= f.input :email,
                      required: false,
                      autofocus: true,
                      input_html: { autocomplete: "email" } %>
          <%= f.input :password,
                      required: false,
                      input_html: { autocomplete: "current-password" } %>
          <%= f.input :remember_me, as: :boolean if devise_mapping.rememberable? %>
        </div>

        <div class="log-butt align-btn">
          <div class="log-btn">
            <%= f.button :submit, "Log in" %>
          </div>
          <%= render "devise/shared/links" %>
        </div>

      <% end %>

  </div>
<canvas id="canvas" style="z-index: -2">
</div>
</canvas>

<script type="text/javascript">
  const canvasEl = document.querySelector('#canvas');

  const w = canvasEl.width = window.innerWidth;
  const h = canvasEl.height = window.innerHeight * 2;

  function loop() {
    requestAnimationFrame(loop);
    ctx.clearRect(0,0,w,h);

    confs.forEach((conf) => {
      conf.update();
      conf.draw();
    })
  }

  function Confetti () {
    //construct confetti
    const colours = ['#fde132', '#ffd700', '#fcba05'];

    this.x = Math.round(Math.random() * w);
    this.y = Math.round(Math.random() * h)-(h/2);
    this.rotation = Math.random()*360;

    const size = Math.random()*(w/60);
    this.size = size < 15 ? 15 : size;

    this.color = colours[Math.floor(colours.length * Math.random())];

    this.speed = this.size/7;

    this.opacity = Math.random();

    this.shiftDirection = Math.random() > 0.5 ? 1 : -1;
  }

  Confetti.prototype.border = function() {
    if (this.y >= h) {
      this.y = h;
    }
  }

  Confetti.prototype.update = function() {
    this.y += this.speed;

    if (this.y <= h) {
      this.x += this.shiftDirection/3;
      this.rotation += this.shiftDirection*this.speed/100;
    }

    if (this.y > h) this.border();
  };

  Confetti.prototype.draw = function() {
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.size, this.rotation, this.rotation+(Math.PI/2));
    ctx.lineTo(this.x, this.y);
    ctx.closePath();
    ctx.globalAlpha = this.opacity;
    ctx.fillStyle = this.color;
    ctx.fill();
  };

  const ctx = canvasEl.getContext('2d');
  const confNum = Math.floor(w / 4);
  const confs = new Array(confNum).fill().map(_ => new Confetti());

  loop();
</script>

</div>

