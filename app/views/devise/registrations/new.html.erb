<div class="user-form-container">
  <h2>Sign up</h2>

  <%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
    <%= f.error_notification %>

    <div class="form-inputs">
      <%= f.input :name, { maxlength: 50 } %>
      <%= f.input :email,
                  required: true,
                  autofocus: true,
                  input_html: { autocomplete: "email" } %>
      <%= f.input :password,
                  required: true,
                  hint: ("#{@minimum_password_length} characters minimum" if @minimum_password_length),
                  input_html: { autocomplete: "new-password" } %>
      <%= f.input :password_confirmation,
                  required: true,
                  input_html: { autocomplete: "new-password" } %>
      <p>Upload avatar</p>
      <%= f.file_field :prof_pic %>
      <p></p>
      <%= f.input :portfolio %>
      <p>If you'd like to register as a designer, please insert a URL to your portfolio.</p>
    </div>

    <div class="form-actions">
      <%= f.button :submit, "Sign up" %>
    </div>

  <% end %>
  <canvas id="canvas" style="z-index: -2">
  </canvas>
</div>

<!-- !!!!! confetti !!!! -->
<script type="text/javascript">
  const canvasEl = document.querySelector('#canvas');

  const w = canvasEl.width = window.innerWidth;
  const h = canvasEl.height = window.innerHeight * 2;

  function loop() {
    requestAnimationFrame(loop);
    ctx.clearRect(0,0,w,h);

    confs.forEach((conf) => {
      conf.update();
      conf.draw();
    })
  }

  function Confetti () {
    //construct confetti
    const colours = ['#fde132', '#ffd700', '#fcba05'];

    this.x = Math.round(Math.random() * w);
    this.y = Math.round(Math.random() * h)-(h/2);
    this.rotation = Math.random()*360;

    const size = Math.random()*(w/60);
    this.size = size < 15 ? 15 : size;

    this.color = colours[Math.floor(colours.length * Math.random())];

    this.speed = this.size/7;

    this.opacity = Math.random();

    this.shiftDirection = Math.random() > 0.5 ? 1 : -1;
  }

  Confetti.prototype.border = function() {
    if (this.y >= h) {
      this.y = h;
    }
  }

  Confetti.prototype.update = function() {
    this.y += this.speed;

    if (this.y <= h) {
      this.x += this.shiftDirection/3;
      this.rotation += this.shiftDirection*this.speed/100;
    }

    if (this.y > h) this.border();
  };

  Confetti.prototype.draw = function() {
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.size, this.rotation, this.rotation+(Math.PI/2));
    ctx.lineTo(this.x, this.y);
    ctx.closePath();
    ctx.globalAlpha = this.opacity;
    ctx.fillStyle = this.color;
    ctx.fill();
  };

  const ctx = canvasEl.getContext('2d');
  const confNum = Math.floor(w / 4);
  const confs = new Array(confNum).fill().map(_ => new Confetti());

  loop();
</script>


